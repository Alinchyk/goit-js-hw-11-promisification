{"version":3,"sources":["js/task_1.js","js/task_2.js","js/task_3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","onSuccess","id","onError","result","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"goit-js-hw-11-promisification.54963f94.js","sourceRoot":"..","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = (ms) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map((user) =>\r\n//     user.name === userName ? {...user, active: !user.active} : user\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\nconst users = [\r\n  {name: \"Mango\", active: true},\r\n  {name: \"Poly\", active: false},\r\n  {name: \"Ajax\", active: true},\r\n  {name: \"Lux\", active: false},\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map((user) =>\r\n    user.name === userName ? {...user, active: !user.active} : user\r\n  );\r\n\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = (updatedUsers) => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, \"Mango\", logger);\r\ntoggleUserState(users, \"Lux\", logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, \"Mango\").then(logger);\r\ntoggleUserState(users, \"Lux\").then(logger);\r\n","// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        onSuccess(transaction.id, delay);\r\n      } else {\r\n        onError(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nfunction onSuccess(result) {\r\n  console.log(result);\r\n}\r\n\r\nfunction onError(result) {\r\n  console.log(result);\r\n}\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\nmakeTransaction({id: 70, amount: 150}, logSuccess, logError);\r\nmakeTransaction({id: 71, amount: 230}, logSuccess, logError);\r\nmakeTransaction({id: 72, amount: 75}, logSuccess, logError);\r\nmakeTransaction({id: 73, amount: 100}, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({id: 70, amount: 150}).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({id: 71, amount: 230}).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({id: 72, amount: 75}).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({id: 73, amount: 100}).then(logSuccess).catch(logError);\r\n","import \"./js/task_1\";\r\nimport \"./js/task_2\";\r\nimport \"./js/task_3\";\r\n"]}